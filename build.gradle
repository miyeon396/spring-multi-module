plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
}

allprojects {
    group = 'com.example'
    version = '1.0.0'
    
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    
    java {
        sourceCompatibility = '21'
        targetCompatibility = '21'
    }
    
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
    
    tasks.withType(Test) {
        useJUnitPlatform()
    }
    
    // 각 모듈별 Javadoc 생성
    tasks.register('generateModuleJavadoc', Javadoc) {
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath
        destinationDir = file("${rootProject.projectDir}/docs/javadoc/${project.name}")
        
        options {
            encoding = 'UTF-8'
            charSet = 'UTF-8'
            docEncoding = 'UTF-8'
            links 'https://docs.oracle.com/en/java/javase/21/docs/api/'
            addStringOption('Xdoclint:none', '-quiet')

            // 커스텀 CSS 추가
            stylesheetFile = file("${rootProject.projectDir}/docs/stylesheets/javadocs.css")

            // 헤더/푸터 커스터마이징
            header = '<a href="../../">← 문서로 돌아가기</a>'
            footer = 'Spring Multi-Module Project'
        }
        
        doLast {
            println "Javadoc for ${project.name} generated at: ${destinationDir}"
        }
    }
}

// 모든 모듈의 Javadoc을 한 번에 생성하는 태스크
tasks.register('generateAllJavadocs') {
    dependsOn subprojects.collect { it.tasks.named('generateModuleJavadoc') }
    group = 'documentation'
    description = 'Generate Javadoc for all modules and export to MkDocs directory'
    
    doLast {
        println "All Javadocs generated successfully in docs/javadoc/"
    }
}

// 통합 Javadoc 생성 (선택사항)
tasks.register('generateAggregatedJavadoc', Javadoc) {
    group = 'documentation'
    description = 'Generate aggregated Javadoc for all modules'
    
    source subprojects.collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${projectDir}/docs/javadoc/aggregated")
    
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        docEncoding = 'UTF-8'
        links 'https://docs.oracle.com/en/java/javase/21/docs/api/'
        addStringOption('Xdoclint:none', '-quiet')
    }
}
